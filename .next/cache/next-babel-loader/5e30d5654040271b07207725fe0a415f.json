{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport { ADD_TO_CART, REMOVE_ITEM, ADD_QUANTITY, SUB_QUANTITY } from '../actions/types';\nconst initState = {\n  addedItems: [],\n  total: 0\n};\n\nconst addCart = (state, action) => {\n  let existed_item = state.addedItems.find(item => action.data.id === item.id);\n\n  if (existed_item) {\n    action.data.quantity += 1;\n    return _objectSpread({}, state, {\n      total: state.total + action.data.price\n    });\n  } else {\n    action.data.quantity = 1; //calculating the total\n\n    let newTotal = state.total + action.data.price;\n    return _objectSpread({}, state, {\n      addedItems: [...state.addedItems, action.data],\n      total: newTotal\n    });\n  }\n};\n\nconst removeCart = (state, action) => {\n  let itemToRemove = state.addedItems.find(item => action.id === item.id);\n  let new_items = state.addedItems.filter(item => action.id !== item.id); //calculating the total\n\n  let newTotal = state.total - itemToRemove.price * itemToRemove.quantity;\n  console.log(itemToRemove);\n  return _objectSpread({}, state, {\n    addedItems: new_items,\n    total: newTotal\n  });\n};\n\nconst increaseQuantity = (state, action) => {\n  let addedItem = state.addedItems.find(item => item.id === action.id);\n  addedItem.quantity += 1;\n  let newTotal = state.total + addedItem.price;\n  return _objectSpread({}, state, {\n    total: newTotal\n  });\n};\n\nconst decreaseQuantity = (state, action) => {\n  let addedItem = state.addedItems.find(item => item.id === action.id); //if the qt == 0 then it should be removed\n\n  if (addedItem.quantity === 1) {\n    let new_items = state.addedItems.filter(item => item.id !== action.id);\n    let newTotal = state.total - addedItem.price;\n    return _objectSpread({}, state, {\n      addedItems: new_items,\n      total: newTotal\n    });\n  } else {\n    addedItem.quantity -= 1;\n    let newTotal = state.total - addedItem.price;\n    return _objectSpread({}, state, {\n      total: newTotal\n    });\n  }\n}; // type Action = {\n//   id: string;\n//   quantity: number;\n//   price: string\n// }\n// { id: string; quantity: number; price: string | number; }\n\n\nconst cart = (state = initState, action) => {\n  switch (action.type) {\n    case ADD_TO_CART:\n      return addCart(state, action);\n\n    case REMOVE_ITEM:\n      return removeCart(state, action);\n\n    case ADD_QUANTITY:\n      return increaseQuantity(state, action);\n\n    case SUB_QUANTITY:\n      return decreaseQuantity(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default cart;","map":{"version":3,"sources":["/home/noah/codes/aws-course/project/ninostyle-app/src/store/reducers/cartReducer.ts"],"names":["ADD_TO_CART","REMOVE_ITEM","ADD_QUANTITY","SUB_QUANTITY","initState","addedItems","total","addCart","state","action","existed_item","find","item","data","id","quantity","price","newTotal","removeCart","itemToRemove","new_items","filter","console","log","increaseQuantity","addedItem","decreaseQuantity","cart","type"],"mappings":"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","sourcesContent":["import {\n  ADD_TO_CART,\n  REMOVE_ITEM,\n  ADD_QUANTITY,\n  SUB_QUANTITY\n} from '../actions/types';\n\nconst initState = {\n  addedItems: [],\n  total: 0\n};\n\nconst addCart = (\n  state: { addedItems: any; total: any },\n  action: { data: { id: string; quantity: number; price: string | number } }\n) => {\n  let existed_item = state.addedItems.find(\n    (item: { id: string }) => action.data.id === item.id\n  );\n\n  if (existed_item) {\n    action.data.quantity += 1;\n    return {\n      ...state,\n      total: state.total + action.data.price\n    };\n  } else {\n    action.data.quantity = 1;\n    //calculating the total\n    let newTotal = state.total + action.data.price;\n\n    return {\n      ...state,\n      addedItems: [...state.addedItems, action.data],\n      total: newTotal\n    };\n  }\n};\n\nconst removeCart = (\n  state: { addedItems: any; total: any },\n  action: { id: any }\n) => {\n  let itemToRemove = state.addedItems.find(\n    (item: { id: string }) => action.id === item.id\n  );\n  let new_items = state.addedItems.filter(\n    (item: { id: string }) => action.id !== item.id\n  );\n\n  //calculating the total\n  let newTotal = state.total - itemToRemove.price * itemToRemove.quantity;\n  console.log(itemToRemove);\n  return {\n    ...state,\n    addedItems: new_items,\n    total: newTotal\n  };\n};\n\nconst increaseQuantity = (\n  state: { addedItems: any; total: any },\n  action: { id: string }\n) => {\n  let addedItem = state.addedItems.find(\n    (item: { id: string }) => item.id === action.id\n  );\n  addedItem.quantity += 1;\n  let newTotal = state.total + addedItem.price;\n  return {\n    ...state,\n    total: newTotal\n  };\n};\n\nconst decreaseQuantity = (\n  state: { addedItems: any; total: any },\n  action: { id: any }\n) => {\n  let addedItem = state.addedItems.find(\n    (item: { id: string }) => item.id === action.id\n  );\n  //if the qt == 0 then it should be removed\n  if (addedItem.quantity === 1) {\n    let new_items = state.addedItems.filter(\n      (item: { id: string }) => item.id !== action.id\n    );\n    let newTotal = state.total - addedItem.price;\n    return {\n      ...state,\n      addedItems: new_items,\n      total: newTotal\n    };\n  } else {\n    addedItem.quantity -= 1;\n    let newTotal = state.total - addedItem.price;\n    return {\n      ...state,\n      total: newTotal\n    };\n  }\n};\n\n// type Action = {\n//   id: string;\n//   quantity: number;\n//   price: string\n// }\n\n// { id: string; quantity: number; price: string | number; }\n\nconst cart = (\n  state = initState,\n  action: {\n    data: { id: string; quantity: number; price: string | number };\n    id: string;\n    type?: string;\n  }\n) => {\n  switch (action.type) {\n    case ADD_TO_CART:\n      return addCart(state, action);\n    case REMOVE_ITEM:\n      return removeCart(state, action);\n    case ADD_QUANTITY:\n      return increaseQuantity(state, action);\n    case SUB_QUANTITY:\n      return decreaseQuantity(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default cart;\n"]},"metadata":{},"sourceType":"module"}